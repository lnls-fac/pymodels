"""Contain magnets strengths that fit real machine with storage ring model.

Different models may reproduce different aspects of the real machine.

"""

import numpy as _np

import pyaccel as _pa

from .families import get_family_data


def vertical_dispersion_and_coupling(model, famdata=None):
    """Reproduce vertical dispersion function and betatron coupling of machine.

    This model was built via fitting of the measured vertical dispersion
    function with the chromatic skew quadrupoles of the machine. The
    measurement used for fitting was the matrix measurement of folder:
        shared/screens-iocs/data_by_day/2022-05-24-SI_LOCO/
    with name:
        respmat_endofmay22_bpms_03sector_switching_issue.pickle

    The transverse tunes were also adjusted.

    The version of the storage ring model used in this fitting was:
        SI_V25_04
    The Head of the repository was in commit:
        b806c3bcca6a8a8e02c1a3c9abee92f7366c44cb

    Example:
        >> from pymodels import si
        >> import pyaccel as pa
        >> modcorr = si.create_accelerator()
        >> modcorr = si.fitted_models.vertical_dispersion_and_coupling(modcorr)
        >> eqpar = pa.optics.EqParamsFromBeamEnvelope(modcorr)
        >> print(eq_fit.emit1*1e12, eq_fit.emit2*1e12)
        (247.85215848346252, 4.728953607736642)
        >>print(eq_fit.tune1, eq_fit.tune2, eq_fit.tune3)
        (0.07774444288752377, 0.14136042194137038, 0.004712773241401889)

    Args:
        model (pyaccel.accelerator.Accelerator): Sirius storage ring model.
        famdata (dict, optional): Family data. Defaults to None.

    Returns:
        (pyaccel.accelerator.Accelerator): Fitted Storage ring model.

    """
    if famdata is None:
        famdata = get_family_data(model)
    idcs_qn = _np.array(famdata['QN']['index']).ravel()
    idcs_qs = _np.array(famdata['QS']['index']).ravel()

    stren_qn = _np.array([
        +0.71430178, -0.22654698, +0.56367412, +0.86806588, +0.64368619,
        +0.79013736, +0.79013736, +0.64368619, +0.86806588, +0.56367412,
        -0.28071465, +1.23394827, -0.47848197, -0.47848197, +1.23394827,
        -0.28071465, +0.56367412, +0.86806588, +0.64368619, +0.79013736,
        +0.79013736, +0.64368619, +0.86806588, +0.56367412, -0.28071465,
        +1.23394827, -0.47848197, -0.47848197, +1.23394827, -0.28071465,
        +0.56367412, +0.86806588, +0.64368619, +0.79013736, +0.79013736,
        +0.64368619, +0.86806588, +0.56367412, -0.28071465, +1.23394827,
        -0.47848197, -0.47848197, +1.23394827, -0.28071465, +0.56367412,
        +0.86806588, +0.64368619, +0.79013736, +0.79013736, +0.64368619,
        +0.86806588, +0.56367412, -0.22654698, +0.71430178, +0.71430178,
        -0.22654698, +0.56367412, +0.86806588, +0.64368619, +0.79013736,
        +0.79013736, +0.64368619, +0.86806588, +0.56367412, -0.28071465,
        +1.23394827, -0.47848197, -0.47848197, +1.23394827, -0.28071465,
        +0.56367412, +0.86806588, +0.64368619, +0.79013736, +0.79013736,
        +0.64368619, +0.86806588, +0.56367412, -0.28071465, +1.23394827,
        -0.47848197, -0.47848197, +1.23394827, -0.28071465, +0.56367412,
        +0.86806588, +0.64368619, +0.79013736, +0.79013736, +0.64368619,
        +0.86806588, +0.56367412, -0.28071465, +1.23394827, -0.47848197,
        -0.47848197, +1.23394827, -0.28071465, +0.56367412, +0.86806588,
        +0.64368619, +0.79013736, +0.79013736, +0.64368619, +0.86806588,
        +0.56367412, -0.22654698, +0.71430178, +0.71430178, -0.22654698,
        +0.56367412, +0.86806588, +0.64368619, +0.79013736, +0.79013736,
        +0.64368619, +0.86806588, +0.56367412, -0.28071465, +1.23394827,
        -0.47848197, -0.47848197, +1.23394827, -0.28071465, +0.56367412,
        +0.86806588, +0.64368619, +0.79013736, +0.79013736, +0.64368619,
        +0.86806588, +0.56367412, -0.28071465, +1.23394827, -0.47848197,
        -0.47848197, +1.23394827, -0.28071465, +0.56367412, +0.86806588,
        +0.64368619, +0.79013736, +0.79013736, +0.64368619, +0.86806588,
        +0.56367412, -0.28071465, +1.23394827, -0.47848197, -0.47848197,
        +1.23394827, -0.28071465, +0.56367412, +0.86806588, +0.64368619,
        +0.79013736, +0.79013736, +0.64368619, +0.86806588, +0.56367412,
        -0.22654698, +0.71430178, +0.71430178, -0.22654698, +0.56367412,
        +0.86806588, +0.64368619, +0.79013736, +0.79013736, +0.64368619,
        +0.86806588, +0.56367412, -0.28071465, +1.23394827, -0.47848197,
        -0.47848197, +1.23394827, -0.28071465, +0.56367412, +0.86806588,
        +0.64368619, +0.79013736, +0.79013736, +0.64368619, +0.86806588,
        +0.56367412, -0.28071465, +1.23394827, -0.47848197, -0.47848197,
        +1.23394827, -0.28071465, +0.56367412, +0.86806588, +0.64368619,
        +0.79013736, +0.79013736, +0.64368619, +0.86806588, +0.56367412,
        -0.28071465, +1.23394827, -0.47848197, -0.47848197, +1.23394827,
        -0.28071465, +0.56367412, +0.86806588, +0.64368619, +0.79013736,
        +0.79013736, +0.64368619, +0.86806588, +0.56367412, -0.22654698,
        +0.71430178, +0.71430178, -0.22654698, +0.56367412, +0.86806588,
        +0.64368619, +0.79013736, +0.79013736, +0.64368619, +0.86806588,
        +0.56367412, -0.28071465, +1.23394827, -0.47848197, -0.47848197,
        +1.23394827, -0.28071465, +0.56367412, +0.86806588, +0.64368619,
        +0.79013736, +0.79013736, +0.64368619, +0.86806588, +0.56367412,
        -0.28071465, +1.23394827, -0.47848197, -0.47848197, +1.23394827,
        -0.28071465, +0.56367412, +0.86806588, +0.64368619, +0.79013736,
        +0.79013736, +0.64368619, +0.86806588, +0.56367412, -0.28071465,
        +1.23394827, -0.47848197, -0.47848197, +1.23394827, -0.28071465,
        +0.56367412, +0.86806588, +0.64368619, +0.79013736, +0.79013736,
        +0.64368619, +0.86806588, +0.56367412, -0.22654698, +0.71430178])

    stren_qs = _np.array([
        -0.00000000e+00, +3.47551054e-04, -1.59614857e-04, -8.90197500e-04,
        -0.00000000e+00, -0.00000000e+00, +7.26135645e-04, +1.60636777e-04,
        +1.58554029e-04, -0.00000000e+00, -0.00000000e+00, +5.83304305e-04,
        +4.50169209e-04, +1.61906316e-03, -0.00000000e+00, -0.00000000e+00,
        -6.34099692e-04, -3.48995833e-04, -1.37672926e-03, -0.00000000e+00,
        -0.00000000e+00, +9.62170236e-05, +7.72409950e-04, +3.08963262e-03,
        -0.00000000e+00, -0.00000000e+00, +1.80756375e-03, +1.22005445e-03,
        +4.12851231e-03, -0.00000000e+00, -0.00000000e+00, -2.80859009e-03,
        -2.39938559e-04, +7.93619637e-04, -0.00000000e+00, -0.00000000e+00,
        -5.01777104e-03, +1.62311166e-05, +3.74283333e-03, -0.00000000e+00,
        -0.00000000e+00, -3.68228586e-03, -1.19146877e-03, -2.68693080e-03,
        -0.00000000e+00, -0.00000000e+00, +2.24926693e-03, +1.33910912e-04,
        -9.36564372e-04, -0.00000000e+00, -0.00000000e+00, +2.86965765e-03,
        +6.76792368e-04, +9.73745164e-04, -0.00000000e+00, -0.00000000e+00,
        +2.75569572e-03, -8.17040379e-05, -2.55298588e-03, -0.00000000e+00,
        -0.00000000e+00, +9.47792528e-05, +4.24483352e-04, +1.53021989e-03,
        -0.00000000e+00, -0.00000000e+00, +1.79274927e-03, +3.76161178e-04,
        +3.56036089e-04, -0.00000000e+00, -0.00000000e+00, +1.62773036e-03,
        +2.82196576e-05, -1.01069157e-03, -0.00000000e+00, -0.00000000e+00,
        -2.70278264e-04, +9.42064616e-05, +7.12468747e-04, -0.00000000e+00,
        -0.00000000e+00, +1.35591779e-03, +8.71423671e-05, -1.15482780e-04,
        -0.00000000e+00, -0.00000000e+00, -4.32595637e-03, -1.55914907e-03,
        -3.71606723e-03, -0.00000000e+00, -0.00000000e+00, -2.29625491e-03,
        -1.09608224e-03, -2.89911009e-03, -0.00000000e+00, -0.00000000e+00,
        -3.97596822e-03, -5.31129717e-04, +5.20059083e-04, -0.00000000e+00])

    _pa.lattice.set_attribute(model, 'KsL', idcs_qs, stren_qs)
    _pa.lattice.set_attribute(model, 'KL', idcs_qn, stren_qn)
    return model
